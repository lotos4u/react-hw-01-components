{"version":3,"sources":["components/Profile/styles.module.scss","components/Profile/index.jsx","components/Statistics/index.jsx","components/TransactionHistory/index.jsx","components/FriendListItem/index.jsx","components/FriendList/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Profile","props","className","styles","profile","description","src","avatar","alt","name","tag","location","stats","label","quantity","followers","views","likes","defaultProps","console","log","Statistics","title","map","item","key","id","percentage","TransactionHistory","items","type","amount","currency","FriendListItem","isOnline","width","FriendList","friends","App","state","profileData","statistics","statisticsData","friendssData","transactions","transactionsData","href","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5c4251b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"styles_profile__hVznA\",\"description\":\"styles_description__2txLQ\",\"avatar\":\"styles_avatar__15ERA\",\"name\":\"styles_name__kR0f3\",\"tag\":\"styles_tag__2z5ZW\",\"location\":\"styles_location__HcFF0\",\"stats\":\"styles_stats__2YXHb\",\"label\":\"styles_label__3C96X\",\"quantity\":\"styles_quantity__23Zr2\"};","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.scss'\n\nconst Profile = (props) => (\n    <div className={styles.profile}>\n        <div className={styles.description}>\n            <img\n                src={props.avatar}\n                alt=\"user avatar\"\n                className={styles.avatar}\n            />\n            <p className={styles.name}>{props.name}</p>\n            <p className={styles.tag}>@{props.tag}</p>\n            <p className={styles.location}>{props.location}</p>\n        </div>\n\n        <ul className={styles.stats}>\n            <li>\n                <span className={styles.label}>Followers</span>\n                <span className={styles.quantity}>{props.stats.followers}</span>\n            </li>\n            <li>\n                <span className={styles.label}>Views</span>\n                <span className={styles.quantity}>{props.stats.views}</span>\n            </li>\n            <li>\n                <span className={styles.label}>Likes</span>\n                <span className={styles.quantity}>{props.stats.likes}</span>\n            </li>\n        </ul>\n    </div>\n);\n\nProfile.propTypes = {\n    name: PropTypes.string.isRequired,\n    location: PropTypes.string.isRequired,\n    tag: PropTypes.string.isRequired,\n    avatar: PropTypes.string.isRequired,\n    stats: PropTypes.shape({\n        followers: PropTypes.number,\n        views: PropTypes.number,\n        likes: PropTypes.number,\n    })\n}\n\nProfile.defaultProps = {}\n\nexport default Profile;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.scss'\n\nconsole.log(styles);\nconst Statistics = (props) => (\n    <section className=\"statistics\">\n        <h2 className=\"title\">{props.title}</h2>\n\n        <ul className=\"stat-list\">\n            {props.stats.map(item =>\n                <li className=\"item\" key={item.id}>\n                <span className=\"label\">{item.label}</span>\n                <span className=\"percentage\">{item.percentage}%</span>\n                </li>\n            )}\n        </ul>\n    </section>\n);\n\nStatistics.propTypes = {\n    title: PropTypes.string.isRequired,\n    stats: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string,\n        label: PropTypes.string,\n        percentage: PropTypes.number,\n    }))\n}\n\nStatistics.defaultProps = {}\n\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.scss'\n\nconsole.log(styles);\nconst TransactionHistory = (props) => (\n    <table className=\"transaction-history\">\n        <thead>\n        <tr>\n            <th>Type</th>\n            <th>Amount</th>\n            <th>Currency</th>\n        </tr>\n        </thead>\n\n        <tbody>\n        {props.items.map(item => <tr key={item.id}>\n            <td>{item.type}</td>\n            <td>{item.amount}</td>\n            <td>{item.currency}</td>\n        </tr>)}\n        </tbody>\n    </table>\n);\n\nTransactionHistory.propTypes = {\n    items: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string,\n        type: PropTypes.string,\n        amount: PropTypes.string,\n        currency: PropTypes.string,\n    }))\n}\n\nTransactionHistory.defaultProps = {}\n\nexport default TransactionHistory;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.scss'\n\nconsole.log(styles);\nconst FriendListItem = (props) => (\n    <li className=\"item\">\n        <span className=\"status\">{props.isOnline}</span>\n        <img className=\"avatar\" src={props.avatar} alt=\"\" width=\"48\"/>\n        <p className=\"name\">{props.name}</p>\n    </li>\n);\n\nFriendListItem.propTypes = {\n    avatar: PropTypes.string,\n    name: PropTypes.string,\n    isOnline: PropTypes.bool,\n}\n\nFriendListItem.defaultProps = {}\n\nexport default FriendListItem;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.scss'\nimport FriendListItem from \"../FriendListItem\";\n\nconsole.log(styles);\nconst FriendList = (props) => (\n    <ul className=\"friend-list\">\n        {props.friends.map(item => <FriendListItem key={item.id}\n                                                   name={item.name}\n                                                   avatar={item.avatar}\n                                                   isOnline={item.isOnline}/>)}\n    </ul>\n);\n\nFriendList.propTypes = {\n    friends: PropTypes.arrayOf(PropTypes.shape({\n        avatar: PropTypes.string,\n        name: PropTypes.string,\n        isOnline: PropTypes.bool,\n        id: PropTypes.number,\n    }))\n}\n\nFriendList.defaultProps = {}\n\nexport default FriendList;\n","import React from 'react';\nimport './App.scss';\nimport Profile from \"./components/Profile\";\nimport profileData from './mockup/profile.json';\nimport statisticsData from './mockup/statistical-data.json';\nimport friendssData from './mockup/friends.json';\nimport transactionsData from './mockup/transactions.json';\nimport Statistics from \"./components/Statistics\";\nimport TransactionHistory from \"./components/TransactionHistory\";\nimport FriendList from \"./components/FriendList\";\n\nfunction App() {\n    const state = {\n        profile: profileData,\n        statistics: statisticsData,\n        friends: friendssData,\n        transactions: transactionsData,\n    };\n\n    return (\n        <div className=\"application\">\n            <div className=\"navigation\">\n                <a href=\"#profile\">Profile</a>\n                <a href=\"#statistics\">Statistics</a>\n                <a href=\"#friends\">Friends</a>\n                <a href=\"#transactions\">Transactions</a>\n            </div>\n            <div className=\"content\">\n                <div id=\"profile\" className=\"task-container\">\n                    <Profile name={state.profile.name}\n                             location={state.profile.location}\n                             tag={state.profile.tag}\n                             avatar={state.profile.avatar}\n                             stats={state.profile.stats}\n                    />\n                </div>\n                <div id=\"statistics\" className=\"task-container\">\n                    <Statistics title=\"Upload stats\" stats={state.statistics} />,\n                </div>\n                <div id=\"friends\" className=\"task-container\">\n                    <FriendList friends={state.friends} />\n                </div>\n                <div id=\"transactions\" className=\"task-container\">\n                    <TransactionHistory items={state.transactions} />,\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}